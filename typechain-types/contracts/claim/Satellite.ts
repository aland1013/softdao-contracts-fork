/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SatelliteInterface extends utils.Interface {
  functions: {
    "connext()": FunctionFragment;
    "distributor()": FunctionFragment;
    "distributorDomain()": FunctionFragment;
    "domain()": FunctionFragment;
    "getMerkleRoot()": FunctionFragment;
    "initiateClaim(uint256,bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "connext"
      | "distributor"
      | "distributorDomain"
      | "domain"
      | "getMerkleRoot"
      | "initiateClaim"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributorDomain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateClaim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimInitiated(bytes32,address,uint256)": EventFragment;
    "SetMerkleRoot(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMerkleRoot"): EventFragment;
}

export interface ClaimInitiatedEventObject {
  id: string;
  beneficiary: string;
  total: BigNumber;
}
export type ClaimInitiatedEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimInitiatedEventObject
>;

export type ClaimInitiatedEventFilter = TypedEventFilter<ClaimInitiatedEvent>;

export interface SetMerkleRootEventObject {
  merkleRoot: string;
}
export type SetMerkleRootEvent = TypedEvent<[string], SetMerkleRootEventObject>;

export type SetMerkleRootEventFilter = TypedEventFilter<SetMerkleRootEvent>;

export interface Satellite extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SatelliteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connext(overrides?: CallOverrides): Promise<[string]>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    distributorDomain(overrides?: CallOverrides): Promise<[number]>;

    domain(overrides?: CallOverrides): Promise<[number]>;

    getMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    initiateClaim(
      total: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  connext(overrides?: CallOverrides): Promise<string>;

  distributor(overrides?: CallOverrides): Promise<string>;

  distributorDomain(overrides?: CallOverrides): Promise<number>;

  domain(overrides?: CallOverrides): Promise<number>;

  getMerkleRoot(overrides?: CallOverrides): Promise<string>;

  initiateClaim(
    total: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    connext(overrides?: CallOverrides): Promise<string>;

    distributor(overrides?: CallOverrides): Promise<string>;

    distributorDomain(overrides?: CallOverrides): Promise<number>;

    domain(overrides?: CallOverrides): Promise<number>;

    getMerkleRoot(overrides?: CallOverrides): Promise<string>;

    initiateClaim(
      total: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimInitiated(bytes32,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      beneficiary?: PromiseOrValue<string> | null,
      total?: null
    ): ClaimInitiatedEventFilter;
    ClaimInitiated(
      id?: PromiseOrValue<BytesLike> | null,
      beneficiary?: PromiseOrValue<string> | null,
      total?: null
    ): ClaimInitiatedEventFilter;

    "SetMerkleRoot(bytes32)"(merkleRoot?: null): SetMerkleRootEventFilter;
    SetMerkleRoot(merkleRoot?: null): SetMerkleRootEventFilter;
  };

  estimateGas: {
    connext(overrides?: CallOverrides): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    distributorDomain(overrides?: CallOverrides): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    getMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    initiateClaim(
      total: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributorDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateClaim(
      total: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

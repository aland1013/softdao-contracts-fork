/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ClaimManagerInterface extends utils.Interface {
  functions: {
    "claim()": FunctionFragment;
    "claimToken()": FunctionFragment;
    "getRemainingClaim(address)": FunctionFragment;
    "getTokenBalance()": FunctionFragment;
    "getTotalClaimable()": FunctionFragment;
    "open()": FunctionFragment;
    "opened()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "remainingClaims()": FunctionFragment;
    "saleId()": FunctionFragment;
    "saleManager()": FunctionFragment;
    "void(address)": FunctionFragment;
    "voidClaims()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "claimToken"
      | "getRemainingClaim"
      | "getTokenBalance"
      | "getTotalClaimable"
      | "open"
      | "opened"
      | "recoverERC20"
      | "remainingClaims"
      | "saleId"
      | "saleManager"
      | "void"
      | "voidClaims"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "opened", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingClaims",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "void",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voidClaims",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opened", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "void", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voidClaims", data: BytesLike): Result;

  events: {
    "Claim(address,uint256,bytes32)": EventFragment;
    "Close()": EventFragment;
    "Open(uint256)": EventFragment;
    "Void(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Close"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Void"): EventFragment;
}

export interface ClaimEventObject {
  claimant: string;
  amount: BigNumber;
  saleId: string;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, string],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface CloseEventObject {}
export type CloseEvent = TypedEvent<[], CloseEventObject>;

export type CloseEventFilter = TypedEventFilter<CloseEvent>;

export interface OpenEventObject {
  totalClaims: BigNumber;
}
export type OpenEvent = TypedEvent<[BigNumber], OpenEventObject>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface VoidEventObject {
  claimant: string;
  voidedClaim: BigNumber;
  saleId: string;
}
export type VoidEvent = TypedEvent<
  [string, BigNumber, string],
  VoidEventObject
>;

export type VoidEventFilter = TypedEventFilter<VoidEvent>;

export interface ClaimManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimToken(overrides?: CallOverrides): Promise<[string]>;

    getRemainingClaim(
      claimant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalClaimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    open(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    opened(overrides?: CallOverrides): Promise<[boolean]>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remainingClaims(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleId(overrides?: CallOverrides): Promise<[string]>;

    saleManager(overrides?: CallOverrides): Promise<[string]>;

    void(
      claimant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voidClaims(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimToken(overrides?: CallOverrides): Promise<string>;

  getRemainingClaim(
    claimant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

  open(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  opened(overrides?: CallOverrides): Promise<boolean>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remainingClaims(overrides?: CallOverrides): Promise<BigNumber>;

  saleId(overrides?: CallOverrides): Promise<string>;

  saleManager(overrides?: CallOverrides): Promise<string>;

  void(
    claimant: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voidClaims(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claim(overrides?: CallOverrides): Promise<BigNumber>;

    claimToken(overrides?: CallOverrides): Promise<string>;

    getRemainingClaim(
      claimant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<void>;

    opened(overrides?: CallOverrides): Promise<boolean>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    remainingClaims(overrides?: CallOverrides): Promise<BigNumber>;

    saleId(overrides?: CallOverrides): Promise<string>;

    saleManager(overrides?: CallOverrides): Promise<string>;

    void(
      claimant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voidClaims(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256,bytes32)"(
      claimant?: PromiseOrValue<string> | null,
      amount?: null,
      saleId?: null
    ): ClaimEventFilter;
    Claim(
      claimant?: PromiseOrValue<string> | null,
      amount?: null,
      saleId?: null
    ): ClaimEventFilter;

    "Close()"(): CloseEventFilter;
    Close(): CloseEventFilter;

    "Open(uint256)"(totalClaims?: null): OpenEventFilter;
    Open(totalClaims?: null): OpenEventFilter;

    "Void(address,uint256,bytes32)"(
      claimant?: PromiseOrValue<string> | null,
      voidedClaim?: null,
      saleId?: null
    ): VoidEventFilter;
    Void(
      claimant?: PromiseOrValue<string> | null,
      voidedClaim?: null,
      saleId?: null
    ): VoidEventFilter;
  };

  estimateGas: {
    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimToken(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingClaim(
      claimant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    opened(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remainingClaims(overrides?: CallOverrides): Promise<BigNumber>;

    saleId(overrides?: CallOverrides): Promise<BigNumber>;

    saleManager(overrides?: CallOverrides): Promise<BigNumber>;

    void(
      claimant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voidClaims(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRemainingClaim(
      claimant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalClaimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    opened(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remainingClaims(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    void(
      claimant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voidClaims(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

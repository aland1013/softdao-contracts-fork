/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ISaleManager_v_1_3Interface extends utils.Interface {
  functions: {
    "buy(bytes32,bytes32[])": FunctionFragment;
    "buy(bytes32,uint256,bytes32[])": FunctionFragment;
    "generateRandomishValue(bytes32)": FunctionFragment;
    "getAdmin(bytes32)": FunctionFragment;
    "getBought(bytes32,address)": FunctionFragment;
    "getClaimManager(bytes32)": FunctionFragment;
    "getDecimals(bytes32)": FunctionFragment;
    "getEndTime(bytes32)": FunctionFragment;
    "getFairQueueTime(bytes32,address)": FunctionFragment;
    "getMaxQueueTime(bytes32)": FunctionFragment;
    "getMerkleRoot(bytes32)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "getPurchaseMinimum(bytes32)": FunctionFragment;
    "getRandomValue(bytes32)": FunctionFragment;
    "getRecipient(bytes32)": FunctionFragment;
    "getSaleBuyLimit(bytes32)": FunctionFragment;
    "getSpent(bytes32,address)": FunctionFragment;
    "getStartTime(bytes32)": FunctionFragment;
    "getTotalSpent(bytes32)": FunctionFragment;
    "getUri(bytes32)": FunctionFragment;
    "getUserBuyLimit(bytes32)": FunctionFragment;
    "isOpen(bytes32)": FunctionFragment;
    "isOver(bytes32)": FunctionFragment;
    "nativeToPaymentToken(uint256)": FunctionFragment;
    "newSale(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint160,string,uint256,uint8)": FunctionFragment;
    "recoverERC20(bytes32,address,uint256)": FunctionFragment;
    "registerClaimManager(bytes32,address)": FunctionFragment;
    "setEnd(bytes32,uint256)": FunctionFragment;
    "setMaxQueueTime(bytes32,uint160)": FunctionFragment;
    "setMerkleRoot(bytes32,bytes32)": FunctionFragment;
    "setStart(bytes32,uint256)": FunctionFragment;
    "setUriAndMerkleRoot(bytes32,bytes32,string)": FunctionFragment;
    "spentToBought(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy(bytes32,bytes32[])"
      | "buy(bytes32,uint256,bytes32[])"
      | "generateRandomishValue"
      | "getAdmin"
      | "getBought"
      | "getClaimManager"
      | "getDecimals"
      | "getEndTime"
      | "getFairQueueTime"
      | "getMaxQueueTime"
      | "getMerkleRoot"
      | "getPrice"
      | "getPriceOracle"
      | "getPurchaseMinimum"
      | "getRandomValue"
      | "getRecipient"
      | "getSaleBuyLimit"
      | "getSpent"
      | "getStartTime"
      | "getTotalSpent"
      | "getUri"
      | "getUserBuyLimit"
      | "isOpen"
      | "isOver"
      | "nativeToPaymentToken"
      | "newSale"
      | "recoverERC20"
      | "registerClaimManager"
      | "setEnd"
      | "setMaxQueueTime"
      | "setMerkleRoot"
      | "setStart"
      | "setUriAndMerkleRoot"
      | "spentToBought"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy(bytes32,bytes32[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buy(bytes32,uint256,bytes32[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomishValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBought",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimManager",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndTime",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFairQueueTime",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxQueueTime",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseMinimum",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleBuyLimit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpent",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSpent",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUri",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBuyLimit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOpen",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOver",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeToPaymentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "newSale",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerClaimManager",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnd",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQueueTime",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStart",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUriAndMerkleRoot",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spentToBought",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "buy(bytes32,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buy(bytes32,uint256,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomishValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBought", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEndTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFairQueueTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxQueueTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeToPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerClaimManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQueueTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUriAndMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spentToBought",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISaleManager_v_1_3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISaleManager_v_1_3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "buy(bytes32,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "buy(bytes32,uint256,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      tokenQuantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateRandomishValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAdmin(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBought(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDecimals(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEndTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFairQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrice(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getPurchaseMinimum(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRandomValue(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRecipient(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSaleBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpent(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStartTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalSpent(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUri(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOpen(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOver(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nativeToPaymentToken(
      nativeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newSale(
      recipient: PromiseOrValue<string>,
      merkleRoot: PromiseOrValue<BytesLike>,
      saleBuyLimit: PromiseOrValue<BigNumberish>,
      userBuyLimit: PromiseOrValue<BigNumberish>,
      purchaseMinimum: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      saleId: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      claimManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnd(
      saleId: PromiseOrValue<BytesLike>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStart(
      saleId: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUriAndMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spentToBought(
      saleId: PromiseOrValue<BytesLike>,
      spent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  "buy(bytes32,bytes32[])"(
    saleId: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "buy(bytes32,uint256,bytes32[])"(
    saleId: PromiseOrValue<BytesLike>,
    tokenQuantity: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateRandomishValue(
    merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAdmin(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBought(
    saleId: PromiseOrValue<BytesLike>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimManager(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDecimals(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEndTime(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFairQueueTime(
    saleId: PromiseOrValue<BytesLike>,
    buyer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxQueueTime(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMerkleRoot(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getPurchaseMinimum(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRandomValue(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRecipient(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSaleBuyLimit(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpent(
    saleId: PromiseOrValue<BytesLike>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStartTime(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalSpent(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUri(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserBuyLimit(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOpen(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOver(
    saleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nativeToPaymentToken(
    nativeValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newSale(
    recipient: PromiseOrValue<string>,
    merkleRoot: PromiseOrValue<BytesLike>,
    saleBuyLimit: PromiseOrValue<BigNumberish>,
    userBuyLimit: PromiseOrValue<BigNumberish>,
    purchaseMinimum: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    maxQueueTime: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    saleId: PromiseOrValue<BytesLike>,
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerClaimManager(
    saleId: PromiseOrValue<BytesLike>,
    claimManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnd(
    saleId: PromiseOrValue<BytesLike>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxQueueTime(
    saleId: PromiseOrValue<BytesLike>,
    maxQueueTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    saleId: PromiseOrValue<BytesLike>,
    merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStart(
    saleId: PromiseOrValue<BytesLike>,
    startTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUriAndMerkleRoot(
    saleId: PromiseOrValue<BytesLike>,
    merkleRoot: PromiseOrValue<BytesLike>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spentToBought(
    saleId: PromiseOrValue<BytesLike>,
    spent: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    "buy(bytes32,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(bytes32,uint256,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      tokenQuantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    generateRandomishValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBought(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDecimals(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getPurchaseMinimum(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomValue(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipient(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSaleBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpent(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSpent(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUri(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOpen(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOver(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nativeToPaymentToken(
      nativeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newSale(
      recipient: PromiseOrValue<string>,
      merkleRoot: PromiseOrValue<BytesLike>,
      saleBuyLimit: PromiseOrValue<BigNumberish>,
      userBuyLimit: PromiseOrValue<BigNumberish>,
      purchaseMinimum: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverERC20(
      saleId: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      claimManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnd(
      saleId: PromiseOrValue<BytesLike>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStart(
      saleId: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUriAndMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spentToBought(
      saleId: PromiseOrValue<BytesLike>,
      spent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    "buy(bytes32,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "buy(bytes32,uint256,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      tokenQuantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateRandomishValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBought(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecimals(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getPurchaseMinimum(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomValue(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipient(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpent(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSpent(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUri(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOpen(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOver(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeToPaymentToken(
      nativeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newSale(
      recipient: PromiseOrValue<string>,
      merkleRoot: PromiseOrValue<BytesLike>,
      saleBuyLimit: PromiseOrValue<BigNumberish>,
      userBuyLimit: PromiseOrValue<BigNumberish>,
      purchaseMinimum: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      saleId: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      claimManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnd(
      saleId: PromiseOrValue<BytesLike>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStart(
      saleId: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUriAndMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spentToBought(
      saleId: PromiseOrValue<BytesLike>,
      spent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "buy(bytes32,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "buy(bytes32,uint256,bytes32[])"(
      saleId: PromiseOrValue<BytesLike>,
      tokenQuantity: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateRandomishValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBought(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFairQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPurchaseMinimum(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomValue(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipient(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpent(
      saleId: PromiseOrValue<BytesLike>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartTime(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSpent(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUri(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBuyLimit(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOpen(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOver(
      saleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeToPaymentToken(
      nativeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newSale(
      recipient: PromiseOrValue<string>,
      merkleRoot: PromiseOrValue<BytesLike>,
      saleBuyLimit: PromiseOrValue<BigNumberish>,
      userBuyLimit: PromiseOrValue<BigNumberish>,
      purchaseMinimum: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      saleId: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerClaimManager(
      saleId: PromiseOrValue<BytesLike>,
      claimManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnd(
      saleId: PromiseOrValue<BytesLike>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxQueueTime(
      saleId: PromiseOrValue<BytesLike>,
      maxQueueTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStart(
      saleId: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUriAndMerkleRoot(
      saleId: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spentToBought(
      saleId: PromiseOrValue<BytesLike>,
      spent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type ConfigStruct = {
  recipient: PromiseOrValue<string>;
  merkleRoot: PromiseOrValue<BytesLike>;
  saleMaximum: PromiseOrValue<BigNumberish>;
  userMaximum: PromiseOrValue<BigNumberish>;
  purchaseMinimum: PromiseOrValue<BigNumberish>;
  startTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  maxQueueTime: PromiseOrValue<BigNumberish>;
  URI: PromiseOrValue<string>;
};

export type ConfigStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  recipient: string;
  merkleRoot: string;
  saleMaximum: BigNumber;
  userMaximum: BigNumber;
  purchaseMinimum: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
  maxQueueTime: BigNumber;
  URI: string;
};

export interface FlatPriceSaleFactoryInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "implementation()": FunctionFragment;
    "newSale(address,(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,string),string,bool,address,address[],address[],uint8[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "VERSION" | "implementation" | "newSale"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newSale",
    values: [
      PromiseOrValue<string>,
      ConfigStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newSale", data: BytesLike): Result;

  events: {
    "NewSale(address,address,tuple,string,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewSale"): EventFragment;
}

export interface NewSaleEventObject {
  implementation: string;
  clone: string;
  config: ConfigStructOutput;
  baseCurrency: string;
  nativeOracle: string;
  nativePaymentsEnabled: boolean;
}
export type NewSaleEvent = TypedEvent<
  [string, string, ConfigStructOutput, string, string, boolean],
  NewSaleEventObject
>;

export type NewSaleEventFilter = TypedEventFilter<NewSaleEvent>;

export interface FlatPriceSaleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlatPriceSaleFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    newSale(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  newSale(
    _owner: PromiseOrValue<string>,
    _config: ConfigStruct,
    _baseCurrency: PromiseOrValue<string>,
    _nativePaymentsEnabled: PromiseOrValue<boolean>,
    _nativeTokenPriceOracle: PromiseOrValue<string>,
    tokens: PromiseOrValue<string>[],
    oracles: PromiseOrValue<string>[],
    decimals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    newSale(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewSale(address,address,tuple,string,address,bool)"(
      implementation?: PromiseOrValue<string> | null,
      clone?: PromiseOrValue<string> | null,
      config?: null,
      baseCurrency?: null,
      nativeOracle?: null,
      nativePaymentsEnabled?: null
    ): NewSaleEventFilter;
    NewSale(
      implementation?: PromiseOrValue<string> | null,
      clone?: PromiseOrValue<string> | null,
      config?: null,
      baseCurrency?: null,
      nativeOracle?: null,
      nativePaymentsEnabled?: null
    ): NewSaleEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    newSale(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSale(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type ConfigStruct = {
  recipient: PromiseOrValue<string>;
  merkleRoot: PromiseOrValue<BytesLike>;
  saleMaximum: PromiseOrValue<BigNumberish>;
  userMaximum: PromiseOrValue<BigNumberish>;
  purchaseMinimum: PromiseOrValue<BigNumberish>;
  startTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  maxQueueTime: PromiseOrValue<BigNumberish>;
  URI: PromiseOrValue<string>;
};

export type ConfigStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  recipient: string;
  merkleRoot: string;
  saleMaximum: BigNumber;
  userMaximum: BigNumber;
  purchaseMinimum: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
  maxQueueTime: BigNumber;
  URI: string;
};

export type PaymentTokenInfoStruct = {
  oracle: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
};

export type PaymentTokenInfoStructOutput = [string, number] & {
  oracle: string;
  decimals: number;
};

export interface FlatPriceSaleInterface extends utils.Interface {
  functions: {
    "BASE_CURRENCY_DECIMALS()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "baseCurrency()": FunctionFragment;
    "buyWithNative(bytes,bytes32[])": FunctionFragment;
    "buyWithToken(address,uint256,bytes,bytes32[])": FunctionFragment;
    "buyerTotal(address)": FunctionFragment;
    "config()": FunctionFragment;
    "generatePseudorandomValue(bytes32)": FunctionFragment;
    "getFairQueueTime(address)": FunctionFragment;
    "getOraclePrice(address)": FunctionFragment;
    "getPaymentToken(address)": FunctionFragment;
    "initialize(address,(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,string),string,bool,address,address[],address[],uint8[])": FunctionFragment;
    "isOpen()": FunctionFragment;
    "isOver()": FunctionFragment;
    "isValidMerkleProof(bytes32,address,bytes,bytes32[])": FunctionFragment;
    "metrics()": FunctionFragment;
    "nativeTokenPriceOracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentTokens(address)": FunctionFragment;
    "payments(address)": FunctionFragment;
    "registerDistributor(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sweepNative()": FunctionFragment;
    "sweepToken(address)": FunctionFragment;
    "tokensToBaseCurrency(uint256,uint256,address)": FunctionFragment;
    "total()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update((address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,string))": FunctionFragment;
    "withdrawPayments(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_CURRENCY_DECIMALS"
      | "VERSION"
      | "baseCurrency"
      | "buyWithNative"
      | "buyWithToken"
      | "buyerTotal"
      | "config"
      | "generatePseudorandomValue"
      | "getFairQueueTime"
      | "getOraclePrice"
      | "getPaymentToken"
      | "initialize"
      | "isOpen"
      | "isOver"
      | "isValidMerkleProof"
      | "metrics"
      | "nativeTokenPriceOracle"
      | "owner"
      | "paymentTokens"
      | "payments"
      | "registerDistributor"
      | "renounceOwnership"
      | "sweepNative"
      | "sweepToken"
      | "tokensToBaseCurrency"
      | "total"
      | "transferOwnership"
      | "update"
      | "withdrawPayments"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_CURRENCY_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithNative",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerTotal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generatePseudorandomValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFairQueueTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      ConfigStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidMerkleProof",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "metrics", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeTokenPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "payments",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToBaseCurrency",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_CURRENCY_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyerTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generatePseudorandomValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFairQueueTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metrics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensToBaseCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,address,uint256,uint256,uint256)": EventFragment;
    "ImplementationConstructor(address,uint256)": EventFragment;
    "Initialize(tuple,string,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisterDistributor(address)": EventFragment;
    "SetPaymentTokenInfo(address,tuple)": EventFragment;
    "SweepNative(uint256)": EventFragment;
    "SweepToken(address,uint256)": EventFragment;
    "Update(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationConstructor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaymentTokenInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
}

export interface BuyEventObject {
  buyer: string;
  token: string;
  baseCurrencyValue: BigNumber;
  tokenValue: BigNumber;
  tokenFee: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface ImplementationConstructorEventObject {
  feeRecipient: string;
  feeBips: BigNumber;
}
export type ImplementationConstructorEvent = TypedEvent<
  [string, BigNumber],
  ImplementationConstructorEventObject
>;

export type ImplementationConstructorEventFilter =
  TypedEventFilter<ImplementationConstructorEvent>;

export interface InitializeEventObject {
  config: ConfigStructOutput;
  baseCurrency: string;
  nativeOracle: string;
  nativePaymentsEnabled: boolean;
}
export type InitializeEvent = TypedEvent<
  [ConfigStructOutput, string, string, boolean],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegisterDistributorEventObject {
  distributor: string;
}
export type RegisterDistributorEvent = TypedEvent<
  [string],
  RegisterDistributorEventObject
>;

export type RegisterDistributorEventFilter =
  TypedEventFilter<RegisterDistributorEvent>;

export interface SetPaymentTokenInfoEventObject {
  token: string;
  paymentTokenInfo: PaymentTokenInfoStructOutput;
}
export type SetPaymentTokenInfoEvent = TypedEvent<
  [string, PaymentTokenInfoStructOutput],
  SetPaymentTokenInfoEventObject
>;

export type SetPaymentTokenInfoEventFilter =
  TypedEventFilter<SetPaymentTokenInfoEvent>;

export interface SweepNativeEventObject {
  amount: BigNumber;
}
export type SweepNativeEvent = TypedEvent<[BigNumber], SweepNativeEventObject>;

export type SweepNativeEventFilter = TypedEventFilter<SweepNativeEvent>;

export interface SweepTokenEventObject {
  token: string;
  amount: BigNumber;
}
export type SweepTokenEvent = TypedEvent<
  [string, BigNumber],
  SweepTokenEventObject
>;

export type SweepTokenEventFilter = TypedEventFilter<SweepTokenEvent>;

export interface UpdateEventObject {
  config: ConfigStructOutput;
}
export type UpdateEvent = TypedEvent<[ConfigStructOutput], UpdateEventObject>;

export type UpdateEventFilter = TypedEventFilter<UpdateEvent>;

export interface FlatPriceSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlatPriceSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    baseCurrency(overrides?: CallOverrides): Promise<[string]>;

    buyWithNative(
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyWithToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyerTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        recipient: string;
        merkleRoot: string;
        saleMaximum: BigNumber;
        userMaximum: BigNumber;
        purchaseMinimum: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        maxQueueTime: BigNumber;
        URI: string;
      }
    >;

    generatePseudorandomValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFairQueueTime(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOraclePrice(
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PaymentTokenInfoStructOutput]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    isOver(overrides?: CallOverrides): Promise<[boolean]>;

    isValidMerkleProof(
      root: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        purchaseCount: BigNumber;
        buyerCount: BigNumber;
        purchaseTotal: BigNumber;
      }
    >;

    nativeTokenPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { oracle: string; decimals: number }>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepNative(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensToBaseCurrency(
      tokenQuantity: PromiseOrValue<BigNumberish>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    total(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      _config: ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  baseCurrency(overrides?: CallOverrides): Promise<string>;

  buyWithNative(
    data: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyWithToken(
    token: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyerTotal(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      recipient: string;
      merkleRoot: string;
      saleMaximum: BigNumber;
      userMaximum: BigNumber;
      purchaseMinimum: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      maxQueueTime: BigNumber;
      URI: string;
    }
  >;

  generatePseudorandomValue(
    merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFairQueueTime(
    buyer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOraclePrice(
    oracle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PaymentTokenInfoStructOutput>;

  initialize(
    _owner: PromiseOrValue<string>,
    _config: ConfigStruct,
    _baseCurrency: PromiseOrValue<string>,
    _nativePaymentsEnabled: PromiseOrValue<boolean>,
    _nativeTokenPriceOracle: PromiseOrValue<string>,
    tokens: PromiseOrValue<string>[],
    oracles: PromiseOrValue<string>[],
    decimals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  isOver(overrides?: CallOverrides): Promise<boolean>;

  isValidMerkleProof(
    root: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  metrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      purchaseCount: BigNumber;
      buyerCount: BigNumber;
      purchaseTotal: BigNumber;
    }
  >;

  nativeTokenPriceOracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { oracle: string; decimals: number }>;

  payments(
    dest: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerDistributor(
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepNative(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensToBaseCurrency(
    tokenQuantity: PromiseOrValue<BigNumberish>,
    tokenDecimals: PromiseOrValue<BigNumberish>,
    oracle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    _config: ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPayments(
    payee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    baseCurrency(overrides?: CallOverrides): Promise<string>;

    buyWithNative(
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyerTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        recipient: string;
        merkleRoot: string;
        saleMaximum: BigNumber;
        userMaximum: BigNumber;
        purchaseMinimum: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        maxQueueTime: BigNumber;
        URI: string;
      }
    >;

    generatePseudorandomValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairQueueTime(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOraclePrice(
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PaymentTokenInfoStructOutput>;

    initialize(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    isOver(overrides?: CallOverrides): Promise<boolean>;

    isValidMerkleProof(
      root: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    metrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        purchaseCount: BigNumber;
        buyerCount: BigNumber;
        purchaseTotal: BigNumber;
      }
    >;

    nativeTokenPriceOracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { oracle: string; decimals: number }>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sweepNative(overrides?: CallOverrides): Promise<void>;

    sweepToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToBaseCurrency(
      tokenQuantity: PromiseOrValue<BigNumberish>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(_config: ConfigStruct, overrides?: CallOverrides): Promise<void>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Buy(address,address,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      baseCurrencyValue?: null,
      tokenValue?: null,
      tokenFee?: null
    ): BuyEventFilter;
    Buy(
      buyer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      baseCurrencyValue?: null,
      tokenValue?: null,
      tokenFee?: null
    ): BuyEventFilter;

    "ImplementationConstructor(address,uint256)"(
      feeRecipient?: PromiseOrValue<string> | null,
      feeBips?: null
    ): ImplementationConstructorEventFilter;
    ImplementationConstructor(
      feeRecipient?: PromiseOrValue<string> | null,
      feeBips?: null
    ): ImplementationConstructorEventFilter;

    "Initialize(tuple,string,address,bool)"(
      config?: null,
      baseCurrency?: null,
      nativeOracle?: null,
      nativePaymentsEnabled?: null
    ): InitializeEventFilter;
    Initialize(
      config?: null,
      baseCurrency?: null,
      nativeOracle?: null,
      nativePaymentsEnabled?: null
    ): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RegisterDistributor(address)"(
      distributor?: null
    ): RegisterDistributorEventFilter;
    RegisterDistributor(distributor?: null): RegisterDistributorEventFilter;

    "SetPaymentTokenInfo(address,tuple)"(
      token?: null,
      paymentTokenInfo?: null
    ): SetPaymentTokenInfoEventFilter;
    SetPaymentTokenInfo(
      token?: null,
      paymentTokenInfo?: null
    ): SetPaymentTokenInfoEventFilter;

    "SweepNative(uint256)"(amount?: null): SweepNativeEventFilter;
    SweepNative(amount?: null): SweepNativeEventFilter;

    "SweepToken(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): SweepTokenEventFilter;
    SweepToken(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): SweepTokenEventFilter;

    "Update(tuple)"(config?: null): UpdateEventFilter;
    Update(config?: null): UpdateEventFilter;
  };

  estimateGas: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    baseCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithNative(
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyWithToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyerTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    generatePseudorandomValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairQueueTime(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOraclePrice(
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    isOver(overrides?: CallOverrides): Promise<BigNumber>;

    isValidMerkleProof(
      root: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metrics(overrides?: CallOverrides): Promise<BigNumber>;

    nativeTokenPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepNative(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensToBaseCurrency(
      tokenQuantity: PromiseOrValue<BigNumberish>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      _config: ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_CURRENCY_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyWithNative(
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyWithToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyerTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generatePseudorandomValue(
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFairQueueTime(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOraclePrice(
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _config: ConfigStruct,
      _baseCurrency: PromiseOrValue<string>,
      _nativePaymentsEnabled: PromiseOrValue<boolean>,
      _nativeTokenPriceOracle: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      oracles: PromiseOrValue<string>[],
      decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidMerkleProof(
      root: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeTokenPriceOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepNative(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensToBaseCurrency(
      tokenQuantity: PromiseOrValue<BigNumberish>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      _config: ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

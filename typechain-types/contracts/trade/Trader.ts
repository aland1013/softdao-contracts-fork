/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IHashflowQuote {
  export type RFQTQuoteStruct = {
    pool: PromiseOrValue<string>;
    externalAccount: PromiseOrValue<string>;
    trader: PromiseOrValue<string>;
    effectiveTrader: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
    quoteToken: PromiseOrValue<string>;
    effectiveBaseTokenAmount: PromiseOrValue<BigNumberish>;
    maxBaseTokenAmount: PromiseOrValue<BigNumberish>;
    maxQuoteTokenAmount: PromiseOrValue<BigNumberish>;
    quoteExpiry: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    txid: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type RFQTQuoteStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    pool: string;
    externalAccount: string;
    trader: string;
    effectiveTrader: string;
    baseToken: string;
    quoteToken: string;
    effectiveBaseTokenAmount: BigNumber;
    maxBaseTokenAmount: BigNumber;
    maxQuoteTokenAmount: BigNumber;
    quoteExpiry: BigNumber;
    nonce: BigNumber;
    txid: string;
    signature: string;
  };

  export type XChainRFQTQuoteStruct = {
    srcChainId: PromiseOrValue<BigNumberish>;
    dstChainId: PromiseOrValue<BigNumberish>;
    srcPool: PromiseOrValue<string>;
    dstPool: PromiseOrValue<BytesLike>;
    srcExternalAccount: PromiseOrValue<string>;
    dstExternalAccount: PromiseOrValue<BytesLike>;
    trader: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
    quoteToken: PromiseOrValue<string>;
    baseTokenAmount: PromiseOrValue<BigNumberish>;
    quoteTokenAmount: PromiseOrValue<BigNumberish>;
    quoteExpiry: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    txid: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type XChainRFQTQuoteStructOutput = [
    number,
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    srcChainId: number;
    dstChainId: number;
    srcPool: string;
    dstPool: string;
    srcExternalAccount: string;
    dstExternalAccount: string;
    trader: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: BigNumber;
    quoteTokenAmount: BigNumber;
    quoteExpiry: BigNumber;
    nonce: BigNumber;
    txid: string;
    signature: string;
  };
}

export interface TraderInterface extends utils.Interface {
  functions: {
    "getConfig()": FunctionFragment;
    "getFee(uint256)": FunctionFragment;
    "getSplit(uint256)": FunctionFragment;
    "getSweepRecipient()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setConfig(address,uint256,address)": FunctionFragment;
    "sweepNative(uint256)": FunctionFragment;
    "sweepNative()": FunctionFragment;
    "sweepToken(address)": FunctionFragment;
    "sweepToken(address,uint256)": FunctionFragment;
    "tradeSingleHop((address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "tradeXChain((uint16,uint16,address,bytes32,address,bytes32,address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes),uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getConfig"
      | "getFee"
      | "getSplit"
      | "getSweepRecipient"
      | "owner"
      | "renounceOwnership"
      | "setConfig"
      | "sweepNative(uint256)"
      | "sweepNative()"
      | "sweepToken(address)"
      | "sweepToken(address,uint256)"
      | "tradeSingleHop"
      | "tradeXChain"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSplit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSweepRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepNative(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepNative()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeSingleHop",
    values: [IHashflowQuote.RFQTQuoteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeXChain",
    values: [IHashflowQuote.XChainRFQTQuoteStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSweepRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepNative(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepNative()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeSingleHop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeXChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "HashflowTradeSingleHop(tuple)": EventFragment;
    "HashflowTradeXChain(tuple,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetConfig(address,uint256)": EventFragment;
    "SetSweepRecipient(address)": EventFragment;
    "SweepNative(uint256)": EventFragment;
    "SweepToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HashflowTradeSingleHop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HashflowTradeXChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSweepRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepToken"): EventFragment;
}

export interface HashflowTradeSingleHopEventObject {
  quote: IHashflowQuote.RFQTQuoteStructOutput;
}
export type HashflowTradeSingleHopEvent = TypedEvent<
  [IHashflowQuote.RFQTQuoteStructOutput],
  HashflowTradeSingleHopEventObject
>;

export type HashflowTradeSingleHopEventFilter =
  TypedEventFilter<HashflowTradeSingleHopEvent>;

export interface HashflowTradeXChainEventObject {
  quote: IHashflowQuote.XChainRFQTQuoteStructOutput;
  protocol: number;
}
export type HashflowTradeXChainEvent = TypedEvent<
  [IHashflowQuote.XChainRFQTQuoteStructOutput, number],
  HashflowTradeXChainEventObject
>;

export type HashflowTradeXChainEventFilter =
  TypedEventFilter<HashflowTradeXChainEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetConfigEventObject {
  router: string;
  feeBips: BigNumber;
}
export type SetConfigEvent = TypedEvent<
  [string, BigNumber],
  SetConfigEventObject
>;

export type SetConfigEventFilter = TypedEventFilter<SetConfigEvent>;

export interface SetSweepRecipientEventObject {
  recipient: string;
}
export type SetSweepRecipientEvent = TypedEvent<
  [string],
  SetSweepRecipientEventObject
>;

export type SetSweepRecipientEventFilter =
  TypedEventFilter<SetSweepRecipientEvent>;

export interface SweepNativeEventObject {
  amount: BigNumber;
}
export type SweepNativeEvent = TypedEvent<[BigNumber], SweepNativeEventObject>;

export type SweepNativeEventFilter = TypedEventFilter<SweepNativeEvent>;

export interface SweepTokenEventObject {
  token: string;
  amount: BigNumber;
}
export type SweepTokenEvent = TypedEvent<
  [string, BigNumber],
  SweepTokenEventObject
>;

export type SweepTokenEventFilter = TypedEventFilter<SweepTokenEvent>;

export interface Trader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConfig(overrides?: CallOverrides): Promise<[string, BigNumber, string]>;

    getFee(
      baseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { baseTokenFee: BigNumber }>;

    getSplit(
      initialTotal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseTokenTotal: BigNumber;
        baseTokenAmount: BigNumber;
        baseTokenFee: BigNumber;
      }
    >;

    getSweepRecipient(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _router: PromiseOrValue<string>,
      _feeBips: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sweepNative(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sweepNative()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sweepToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sweepToken(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getConfig(overrides?: CallOverrides): Promise<[string, BigNumber, string]>;

  getFee(
    baseTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSplit(
    initialTotal: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      baseTokenTotal: BigNumber;
      baseTokenAmount: BigNumber;
      baseTokenFee: BigNumber;
    }
  >;

  getSweepRecipient(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _router: PromiseOrValue<string>,
    _feeBips: PromiseOrValue<BigNumberish>,
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sweepNative(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sweepNative()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sweepToken(address)"(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sweepToken(address,uint256)"(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeSingleHop(
    quote: IHashflowQuote.RFQTQuoteStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeXChain(
    quote: IHashflowQuote.XChainRFQTQuoteStruct,
    protocol: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getConfig(overrides?: CallOverrides): Promise<[string, BigNumber, string]>;

    getFee(
      baseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSplit(
      initialTotal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseTokenTotal: BigNumber;
        baseTokenAmount: BigNumber;
        baseTokenFee: BigNumber;
      }
    >;

    getSweepRecipient(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setConfig(
      _router: PromiseOrValue<string>,
      _feeBips: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sweepNative(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sweepNative()"(overrides?: CallOverrides): Promise<void>;

    "sweepToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sweepToken(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HashflowTradeSingleHop(tuple)"(
      quote?: null
    ): HashflowTradeSingleHopEventFilter;
    HashflowTradeSingleHop(quote?: null): HashflowTradeSingleHopEventFilter;

    "HashflowTradeXChain(tuple,uint8)"(
      quote?: null,
      protocol?: null
    ): HashflowTradeXChainEventFilter;
    HashflowTradeXChain(
      quote?: null,
      protocol?: null
    ): HashflowTradeXChainEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetConfig(address,uint256)"(
      router?: null,
      feeBips?: null
    ): SetConfigEventFilter;
    SetConfig(router?: null, feeBips?: null): SetConfigEventFilter;

    "SetSweepRecipient(address)"(
      recipient?: null
    ): SetSweepRecipientEventFilter;
    SetSweepRecipient(recipient?: null): SetSweepRecipientEventFilter;

    "SweepNative(uint256)"(amount?: null): SweepNativeEventFilter;
    SweepNative(amount?: null): SweepNativeEventFilter;

    "SweepToken(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): SweepTokenEventFilter;
    SweepToken(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): SweepTokenEventFilter;
  };

  estimateGas: {
    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      baseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSplit(
      initialTotal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSweepRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      _router: PromiseOrValue<string>,
      _feeBips: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sweepNative(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sweepNative()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sweepToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sweepToken(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      baseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSplit(
      initialTotal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSweepRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _router: PromiseOrValue<string>,
      _feeBips: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sweepNative(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sweepNative()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sweepToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sweepToken(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type DistributionRecordStruct = {
  initialized: PromiseOrValue<boolean>;
  total: PromiseOrValue<BigNumberish>;
  claimed: PromiseOrValue<BigNumberish>;
};

export type DistributionRecordStructOutput = [boolean, BigNumber, BigNumber] & {
  initialized: boolean;
  total: BigNumber;
  claimed: BigNumber;
};

export interface ICrosschainInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "getClaimableAmount(address)": FunctionFragment;
    "getDistributionRecord(address)": FunctionFragment;
    "getFractionDenominator()": FunctionFragment;
    "token()": FunctionFragment;
    "total()": FunctionFragment;
    "uri()": FunctionFragment;
    "xReceive(bytes32,uint256,address,address,uint32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "VERSION"
      | "getClaimableAmount"
      | "getDistributionRecord"
      | "getFractionDenominator"
      | "token"
      | "total"
      | "uri"
      | "xReceive"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(functionFragment: "uri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xReceive",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xReceive", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "CrosschainClaim(bytes32,address,address,uint32,uint256)": EventFragment;
    "InitializeDistributionRecord(address,uint256)": EventFragment;
    "InitializeDistributor(address,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrosschainClaim"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitializeDistributionRecord"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializeDistributor"): EventFragment;
}

export interface ClaimEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface CrosschainClaimEventObject {
  id: string;
  beneficiary: string;
  recipient: string;
  recipientDomain: number;
  amount: BigNumber;
}
export type CrosschainClaimEvent = TypedEvent<
  [string, string, string, number, BigNumber],
  CrosschainClaimEventObject
>;

export type CrosschainClaimEventFilter = TypedEventFilter<CrosschainClaimEvent>;

export interface InitializeDistributionRecordEventObject {
  beneficiary: string;
  total: BigNumber;
}
export type InitializeDistributionRecordEvent = TypedEvent<
  [string, BigNumber],
  InitializeDistributionRecordEventObject
>;

export type InitializeDistributionRecordEventFilter =
  TypedEventFilter<InitializeDistributionRecordEvent>;

export interface InitializeDistributorEventObject {
  token: string;
  total: BigNumber;
  uri: string;
  fractionDenominator: BigNumber;
}
export type InitializeDistributorEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  InitializeDistributorEventObject
>;

export type InitializeDistributorEventFilter =
  TypedEventFilter<InitializeDistributorEvent>;

export interface ICrosschain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrosschainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableAmount(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDistributionRecord(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DistributionRecordStructOutput]>;

    getFractionDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    total(overrides?: CallOverrides): Promise<[BigNumber]>;

    uri(overrides?: CallOverrides): Promise<[string]>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableAmount(
    beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDistributionRecord(
    beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DistributionRecordStructOutput>;

  getFractionDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  uri(overrides?: CallOverrides): Promise<string>;

  xReceive(
    _transferId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _asset: PromiseOrValue<string>,
    _originSender: PromiseOrValue<string>,
    _origin: PromiseOrValue<BigNumberish>,
    _callData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableAmount(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionRecord(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DistributionRecordStructOutput>;

    getFractionDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    uri(overrides?: CallOverrides): Promise<string>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Claim(address,uint256)"(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;

    "CrosschainClaim(bytes32,address,address,uint32,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      beneficiary?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      recipientDomain?: null,
      amount?: null
    ): CrosschainClaimEventFilter;
    CrosschainClaim(
      id?: PromiseOrValue<BytesLike> | null,
      beneficiary?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      recipientDomain?: null,
      amount?: null
    ): CrosschainClaimEventFilter;

    "InitializeDistributionRecord(address,uint256)"(
      beneficiary?: PromiseOrValue<string> | null,
      total?: null
    ): InitializeDistributionRecordEventFilter;
    InitializeDistributionRecord(
      beneficiary?: PromiseOrValue<string> | null,
      total?: null
    ): InitializeDistributionRecordEventFilter;

    "InitializeDistributor(address,uint256,string,uint256)"(
      token?: PromiseOrValue<string> | null,
      total?: null,
      uri?: null,
      fractionDenominator?: null
    ): InitializeDistributorEventFilter;
    InitializeDistributor(
      token?: PromiseOrValue<string> | null,
      total?: null,
      uri?: null,
      fractionDenominator?: null
    ): InitializeDistributorEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableAmount(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionRecord(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFractionDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    uri(overrides?: CallOverrides): Promise<BigNumber>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableAmount(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionRecord(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFractionDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IHashflowQuote {
  export type RFQTQuoteStruct = {
    pool: PromiseOrValue<string>;
    externalAccount: PromiseOrValue<string>;
    trader: PromiseOrValue<string>;
    effectiveTrader: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
    quoteToken: PromiseOrValue<string>;
    effectiveBaseTokenAmount: PromiseOrValue<BigNumberish>;
    maxBaseTokenAmount: PromiseOrValue<BigNumberish>;
    maxQuoteTokenAmount: PromiseOrValue<BigNumberish>;
    quoteExpiry: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    txid: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type RFQTQuoteStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    pool: string;
    externalAccount: string;
    trader: string;
    effectiveTrader: string;
    baseToken: string;
    quoteToken: string;
    effectiveBaseTokenAmount: BigNumber;
    maxBaseTokenAmount: BigNumber;
    maxQuoteTokenAmount: BigNumber;
    quoteExpiry: BigNumber;
    nonce: BigNumber;
    txid: string;
    signature: string;
  };

  export type XChainRFQTQuoteStruct = {
    srcChainId: PromiseOrValue<BigNumberish>;
    dstChainId: PromiseOrValue<BigNumberish>;
    srcPool: PromiseOrValue<string>;
    dstPool: PromiseOrValue<BytesLike>;
    srcExternalAccount: PromiseOrValue<string>;
    dstExternalAccount: PromiseOrValue<BytesLike>;
    trader: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
    quoteToken: PromiseOrValue<string>;
    baseTokenAmount: PromiseOrValue<BigNumberish>;
    quoteTokenAmount: PromiseOrValue<BigNumberish>;
    quoteExpiry: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    txid: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type XChainRFQTQuoteStructOutput = [
    number,
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    srcChainId: number;
    dstChainId: number;
    srcPool: string;
    dstPool: string;
    srcExternalAccount: string;
    dstExternalAccount: string;
    trader: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: BigNumber;
    quoteTokenAmount: BigNumber;
    quoteExpiry: BigNumber;
    nonce: BigNumber;
    txid: string;
    signature: string;
  };
}

export interface IHashflowQuoteInterface extends utils.Interface {
  functions: {
    "tradeSingleHop((address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "tradeXChain((uint16,uint16,address,bytes32,address,bytes32,address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes),uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "tradeSingleHop" | "tradeXChain"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "tradeSingleHop",
    values: [IHashflowQuote.RFQTQuoteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeXChain",
    values: [IHashflowQuote.XChainRFQTQuoteStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "tradeSingleHop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeXChain",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHashflowQuote extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHashflowQuoteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  tradeSingleHop(
    quote: IHashflowQuote.RFQTQuoteStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeXChain(
    quote: IHashflowQuote.XChainRFQTQuoteStruct,
    protocol: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    tradeSingleHop(
      quote: IHashflowQuote.RFQTQuoteStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeXChain(
      quote: IHashflowQuote.XChainRFQTQuoteStruct,
      protocol: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TrancheStruct = {
  time: PromiseOrValue<BigNumberish>;
  vestedFraction: PromiseOrValue<BigNumberish>;
};

export type TrancheStructOutput = [BigNumber, BigNumber] & {
  time: BigNumber;
  vestedFraction: BigNumber;
};

export interface ITrancheVestingInterface extends utils.Interface {
  functions: {
    "getTranche(uint256)": FunctionFragment;
    "getTranches()": FunctionFragment;
    "setTranches((uint128,uint128)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getTranche" | "getTranches" | "setTranches"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTranche",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTranches",
    values: [TrancheStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "getTranche", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTranches",
    data: BytesLike
  ): Result;

  events: {
    "SetTranche(uint256,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetTranche"): EventFragment;
}

export interface SetTrancheEventObject {
  index: BigNumber;
  time: BigNumber;
  VestedFraction: BigNumber;
}
export type SetTrancheEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SetTrancheEventObject
>;

export type SetTrancheEventFilter = TypedEventFilter<SetTrancheEvent>;

export interface ITrancheVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITrancheVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTranche(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TrancheStructOutput]>;

    getTranches(overrides?: CallOverrides): Promise<[TrancheStructOutput[]]>;

    setTranches(
      _tranches: TrancheStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTranche(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TrancheStructOutput>;

  getTranches(overrides?: CallOverrides): Promise<TrancheStructOutput[]>;

  setTranches(
    _tranches: TrancheStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTranche(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TrancheStructOutput>;

    getTranches(overrides?: CallOverrides): Promise<TrancheStructOutput[]>;

    setTranches(
      _tranches: TrancheStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetTranche(uint256,uint128,uint128)"(
      index?: PromiseOrValue<BigNumberish> | null,
      time?: null,
      VestedFraction?: null
    ): SetTrancheEventFilter;
    SetTranche(
      index?: PromiseOrValue<BigNumberish> | null,
      time?: null,
      VestedFraction?: null
    ): SetTrancheEventFilter;
  };

  estimateGas: {
    getTranche(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranches(overrides?: CallOverrides): Promise<BigNumber>;

    setTranches(
      _tranches: TrancheStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTranche(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTranches(
      _tranches: TrancheStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

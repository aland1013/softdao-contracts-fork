/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IAdjustableInterface extends utils.Interface {
  functions: {
    "adjust(address,int256)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "setTotal(uint256)": FunctionFragment;
    "setUri(string)": FunctionFragment;
    "setVoteFactor(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjust"
      | "setToken"
      | "setTotal"
      | "setUri"
      | "setVoteFactor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjust",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUri",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "adjust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVoteFactor",
    data: BytesLike
  ): Result;

  events: {
    "Adjust(address,int256)": EventFragment;
    "SetToken(address)": EventFragment;
    "SetTotal(uint256)": EventFragment;
    "SetUri(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Adjust"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTotal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUri"): EventFragment;
}

export interface AdjustEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type AdjustEvent = TypedEvent<[string, BigNumber], AdjustEventObject>;

export type AdjustEventFilter = TypedEventFilter<AdjustEvent>;

export interface SetTokenEventObject {
  token: string;
}
export type SetTokenEvent = TypedEvent<[string], SetTokenEventObject>;

export type SetTokenEventFilter = TypedEventFilter<SetTokenEvent>;

export interface SetTotalEventObject {
  total: BigNumber;
}
export type SetTotalEvent = TypedEvent<[BigNumber], SetTotalEventObject>;

export type SetTotalEventFilter = TypedEventFilter<SetTotalEvent>;

export interface SetUriEventObject {
  uri: string;
}
export type SetUriEvent = TypedEvent<[string], SetUriEventObject>;

export type SetUriEventFilter = TypedEventFilter<SetUriEvent>;

export interface IAdjustable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAdjustableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjust(
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotal(
      total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUri(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoteFactor(
      setVoteFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjust(
    beneficiary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotal(
    total: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUri(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoteFactor(
    setVoteFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjust(
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotal(
      total: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUri(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoteFactor(
      setVoteFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Adjust(address,int256)"(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): AdjustEventFilter;
    Adjust(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): AdjustEventFilter;

    "SetToken(address)"(
      token?: PromiseOrValue<string> | null
    ): SetTokenEventFilter;
    SetToken(token?: PromiseOrValue<string> | null): SetTokenEventFilter;

    "SetTotal(uint256)"(total?: null): SetTotalEventFilter;
    SetTotal(total?: null): SetTotalEventFilter;

    "SetUri(string)"(uri?: PromiseOrValue<string> | null): SetUriEventFilter;
    SetUri(uri?: PromiseOrValue<string> | null): SetUriEventFilter;
  };

  estimateGas: {
    adjust(
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotal(
      total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUri(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoteFactor(
      setVoteFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjust(
      beneficiary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotal(
      total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUri(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoteFactor(
      setVoteFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

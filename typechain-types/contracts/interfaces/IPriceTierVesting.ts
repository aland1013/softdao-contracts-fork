/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PriceTierStruct = {
  price: PromiseOrValue<BigNumberish>;
  vestedFraction: PromiseOrValue<BigNumberish>;
};

export type PriceTierStructOutput = [BigNumber, BigNumber] & {
  price: BigNumber;
  vestedFraction: BigNumber;
};

export interface IPriceTierVestingInterface extends utils.Interface {
  functions: {
    "getEnd()": FunctionFragment;
    "getOracle()": FunctionFragment;
    "getPriceTier(uint256)": FunctionFragment;
    "getPriceTiers()": FunctionFragment;
    "getStart()": FunctionFragment;
    "setPriceTiers(uint256,uint256,address,(uint128,uint128)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEnd"
      | "getOracle"
      | "getPriceTier"
      | "getPriceTiers"
      | "getStart"
      | "setPriceTiers"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getEnd", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceTiers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStart", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPriceTiers",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PriceTierStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceTiers",
    data: BytesLike
  ): Result;

  events: {
    "SetPriceTierConfig(uint256,uint256,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetPriceTierConfig"): EventFragment;
}

export interface SetPriceTierConfigEventObject {
  start: BigNumber;
  end: BigNumber;
  oracle: string;
  tiers: PriceTierStructOutput[];
}
export type SetPriceTierConfigEvent = TypedEvent<
  [BigNumber, BigNumber, string, PriceTierStructOutput[]],
  SetPriceTierConfigEventObject
>;

export type SetPriceTierConfigEventFilter =
  TypedEventFilter<SetPriceTierConfigEvent>;

export interface IPriceTierVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPriceTierVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracle(overrides?: CallOverrides): Promise<[string]>;

    getPriceTier(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PriceTierStructOutput]>;

    getPriceTiers(
      overrides?: CallOverrides
    ): Promise<[PriceTierStructOutput[]]>;

    getStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPriceTiers(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _tiers: PriceTierStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getEnd(overrides?: CallOverrides): Promise<BigNumber>;

  getOracle(overrides?: CallOverrides): Promise<string>;

  getPriceTier(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PriceTierStructOutput>;

  getPriceTiers(overrides?: CallOverrides): Promise<PriceTierStructOutput[]>;

  getStart(overrides?: CallOverrides): Promise<BigNumber>;

  setPriceTiers(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    _oracle: PromiseOrValue<string>,
    _tiers: PriceTierStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getEnd(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<string>;

    getPriceTier(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PriceTierStructOutput>;

    getPriceTiers(overrides?: CallOverrides): Promise<PriceTierStructOutput[]>;

    getStart(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceTiers(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _tiers: PriceTierStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetPriceTierConfig(uint256,uint256,address,tuple[])"(
      start?: null,
      end?: null,
      oracle?: null,
      tiers?: null
    ): SetPriceTierConfigEventFilter;
    SetPriceTierConfig(
      start?: null,
      end?: null,
      oracle?: null,
      tiers?: null
    ): SetPriceTierConfigEventFilter;
  };

  estimateGas: {
    getEnd(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceTier(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceTiers(overrides?: CallOverrides): Promise<BigNumber>;

    getStart(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceTiers(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _tiers: PriceTierStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceTier(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceTiers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPriceTiers(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _tiers: PriceTierStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

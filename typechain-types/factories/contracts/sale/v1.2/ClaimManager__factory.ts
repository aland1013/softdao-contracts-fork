/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ClaimManager,
  ClaimManagerInterface,
} from "../../../../contracts/sale/v1.2/ClaimManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_saleManager",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_saleId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_claimToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "saleId",
        type: "bytes32",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Close",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "totalClaims",
        type: "uint256",
      },
    ],
    name: "Open",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "voidedClaim",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "saleId",
        type: "bytes32",
      },
    ],
    name: "Void",
    type: "event",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimant",
        type: "address",
      },
    ],
    name: "getRemainingClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalClaimable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "open",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "opened",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "remainingClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "saleId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "saleManager",
    outputs: [
      {
        internalType: "contract SaleManager_v_1_2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimant",
        type: "address",
      },
    ],
    name: "void",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "voidClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e03461010a57601f61130938819003918201601f19168301916001600160401b0383118484101761010f5780849260609460405283398101031261010a5761004781610125565b90610059604060208301519201610125565b6001600160a01b0392831660805260a0919091521660c0526040516111cf908161013a8239608051818181610108015281816104a2015281816106c0015281816108b40152818161097801528181610c6c0152610d3b015260a05181818160d20152818161046f01528181610611015281816106930152818161094801528181610c410152610d13015260c0518181816101ce0152818161065c0152818161081d01528181610a620152610b410152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361010a5756fe60806040908082526004918236101561001757600080fd5b600091823560e01c90816309a8c9e914610b955750806315366ee914610b705780634451d89f14610b2d5780634e71d92d146109275780635f88eade146109065780636180c609146108e3578063746e60b5146108a057806382b2e257146107e15780638980f11f14610634578063c84c0387146105fa578063ddc9947714610443578063f5dbbada146104255763fcfff16f146100b457600080fd5b346104215781600319360112610421578051634063738560e11b81527f00000000000000000000000000000000000000000000000000000000000000008185018190526024946020926001600160a01b03927f000000000000000000000000000000000000000000000000000000000000000084169185818a81865afa908115610338579061014e918991610404575b5085163314610e9a565b85516304f8b50b60e41b815283810182905285818a81865afa90811561033857869291610182918a916103d7575b50610efe565b8887518094819363231bedc760e01b8352878301525afa9081156103cd5786916103a0575b5082309116036103425784546101c060ff821615610f4a565b6101c8610d04565b906044857f000000000000000000000000000000000000000000000000000000000000000095885192838092636eb1769f60e11b825233898301528d309083015289165afa908115610338579083918991610303575b50106102b7576001908260025560ff19161786557f9648cf7f2eb86b564ae3c4a466bc03e87267933667490eb8737a5a3f2a9b284d848651838152a18451936323b872dd60e01b90850152338785015230604485015260648401526064835260a083019083821067ffffffffffffffff8311176102a5575083526102a29190610f8e565b51f35b634e487b7160e01b8652604190528585fd5b855162461bcd60e51b81528084018690526021818a01527f636c61696d7320636f6e747261637420616c6c6f77616e636520746f6f206c6f6044820152607760f81b6064820152608490fd5b809250878092503d8311610331575b61031c8183610bcc565b8101031261032d578290513861021e565b8780fd5b503d610312565b87513d8a823e3d90fd5b835162461bcd60e51b81529081018390526033818701527f6e6f74207265676973746572656420617320636c61696d7320636f6e747261636044820152723a103bb4ba341039b0b6329036b0b730b3b2b960691b6064820152608490fd5b6103c09150843d86116103c6575b6103b88183610bcc565b810190610e7b565b386101a7565b503d6103ae565b85513d88823e3d90fd5b6103f79150843d86116103fd575b6103ef8183610bcc565b810190610ee6565b3861017c565b503d6103e5565b61041b9150873d89116103c6576103b88183610bcc565b38610144565b5080fd5b50346104215781600319360112610421576020906001549051908152f35b508290346105f657602092836003193601126105f357610461610bb1565b8251634063738560e11b81527f00000000000000000000000000000000000000000000000000000000000000008186018190529194906001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908881602481855afa9081156105e957916104ec8a9260249489916105cc575085163314610e9a565b8751928380926304f8b50b60e41b825288888301525afa9081156105c2579061051b9186916105a55750610efe565b61052960ff85541615610f4a565b61053286610c04565b95169283815260038752848120600160ff19825416179055600154918683018093116105925750507ff4299d7e246313e71d45f3d437ab9d78668c15a33fd4b3e612c1de804a528d4d91849160015581519086825287820152a251908152f35b634e487b7160e01b825260119052602490fd5b6105bc9150893d8b116103fd576103ef8183610bcc565b8961017c565b86513d87823e3d90fd5b6105e39150843d86116103c6576103b88183610bcc565b8c610144565b87513d88823e3d90fd5b80fd5b8280fd5b5034610421578160031936011261042157602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5082346105f657816003193601126105f6576001600160a01b0380610657610bb1565b1690807f000000000000000000000000000000000000000000000000000000000000000016821461078457835192839163fbc6da7560e01b83527f00000000000000000000000000000000000000000000000000000000000000008284015282602460209687937f0000000000000000000000000000000000000000000000000000000000000000165afa9283156103cd5761072d9385938891610767575b50865163a9059cbb60e01b81526001600160a01b039091169281019283526024356020840152938492839189918391604090910190565b03925af1801561075a5761074057505051f35b8161075692903d106103fd576103ef8183610bcc565b5051f35b50505051903d90823e3d90fd5b61077e9150843d86116103c6576103b88183610bcc565b886106f6565b835162461bcd60e51b8152602081850152603160248201527f4f6e6c7920666f72207265636f766572696e6720746f6b656e73206163636964604482015270656e74616c6c792073656e74206865726560781b6064820152608490fd5b508290346105f657826003193601126105f65761080160ff845416610e2f565b80516370a0823160e01b815230928101929092526020826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561089657839261085f575b6020838351908152f35b9091506020813d821161088e575b8161087a60209383610bcc565b810103126105f65760209250519083610855565b3d915061086d565b81513d85823e3d90fd5b5034610421578160031936011261042157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346104215781600319360112610421576020906108ff610d04565b9051908152f35b503461042157816003193601126104215760ff602092541690519015158152f35b508290346105f657826003193601126105f65780516304f8b50b60e41b81527f00000000000000000000000000000000000000000000000000000000000000008382018190526020949185816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610b2357906109ba918491610b065750610efe565b6109c760ff835416610e2f565b6109d033610c04565b938415610ab7575033825260038552828220600160ff19825416179055825190848252858201527f4804104ccbc53649f5b8b29ecf858272a4a6ed6b9949f0d30237c7a147e84671833392a2610a2883600254610ce1565b8060025515610a8c575b50805163a9059cbb60e01b8482015233602482015260448082018490528152610a8690610a60606482610bcc565b7f0000000000000000000000000000000000000000000000000000000000000000610f8e565b51908152f35b7fc35789ccff76271dc0efa6bfde2f4d4a32cd48dd86278f75f8648cb068c86e3b908251a183610a32565b835162461bcd60e51b81529081018690526024808201527f7468697320616464726573732063616e6e6f7420636c61696d20616e7920746f6044820152636b656e7360e01b6064820152608490fd5b610b1d9150873d89116103fd576103ef8183610bcc565b8761017c565b84513d85823e3d90fd5b5034610421578160031936011261042157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610421576020366003190112610421576020906108ff610b90610bb1565b610c04565b8390346104215781600319360112610421576020906002548152f35b600435906001600160a01b0382168203610bc757565b600080fd5b90601f8019910116810190811067ffffffffffffffff821117610bee57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b039081166000818152600360205260408120549092919060ff16610cdc57602090604460405180948193630976b20560e41b83527f0000000000000000000000000000000000000000000000000000000000000000600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa918215610cd0578092610ca057505090565b9091506020823d8211610cc8575b81610cbb60209383610bcc565b810103126105f357505190565b3d9150610cae565b604051903d90823e3d90fd5b505090565b91908203918211610cee57565b634e487b7160e01b600052601160045260246000fd5b604051630b8211d960e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916020918282602481875afa908115610df2578392600092610dfe575b506044906040519586938492632f87f22360e11b8452600484015260248301525afa908115610df257600091610dc3575b50610dc0915060015490610ce1565b90565b82813d8311610deb575b610dd78183610bcc565b810103126105f35750610dc0905138610db1565b503d610dcd565b6040513d6000823e3d90fd5b91909282813d8311610e28575b610e158183610bcc565b810103126105f357505182916044610d80565b503d610e0b565b15610e3657565b60405162461bcd60e51b815260206004820152601b60248201527f636c61696d73206d757374206265206f70656e656420666972737400000000006044820152606490fd5b90816020910312610bc757516001600160a01b0381168103610bc75790565b15610ea157565b60405162461bcd60e51b815260206004820152601f60248201527f63616e206f6e6c792062652063616c6c6564206279207468652061646d696e006044820152606490fd5b90816020910312610bc757518015158103610bc75790565b15610f0557565b60405162461bcd60e51b815260206004820152601760248201527f73616c65206d757374206265206f7665722066697273740000000000000000006044820152606490fd5b15610f5157565b60405162461bcd60e51b815260206004820152601560248201527418db185a5b5cc8185b1c9958591e481bdc195b9959605a1b6044820152606490fd5b604080516001600160a01b03929092169290919067ffffffffffffffff82840181811184821017610bee5784526020948584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486850152803b156110da5760008381949282898195519301915af1903d156110cb573d9081116110b757845161103694939291611028601f8201601f1916890183610bcc565b81528092873d92013e61111e565b80519081611045575b50505050565b8380611055938301019101610ee6565b1561106157808061103f565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b83526041600452602483fd5b5061103692915060609061111e565b845162461bcd60e51b815260048101879052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9091901561112a575090565b81511561113a5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611180575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061115d56fea2646970667358221220065d3582c59178c3ba364cf444b29ed19c72e0462684e04256f94429987050a264736f6c63430008100033";

type ClaimManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimManager__factory extends ContractFactory {
  constructor(...args: ClaimManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _saleManager: PromiseOrValue<string>,
    _saleId: PromiseOrValue<BytesLike>,
    _claimToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimManager> {
    return super.deploy(
      _saleManager,
      _saleId,
      _claimToken,
      overrides || {}
    ) as Promise<ClaimManager>;
  }
  override getDeployTransaction(
    _saleManager: PromiseOrValue<string>,
    _saleId: PromiseOrValue<BytesLike>,
    _claimToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _saleManager,
      _saleId,
      _claimToken,
      overrides || {}
    );
  }
  override attach(address: string): ClaimManager {
    return super.attach(address) as ClaimManager;
  }
  override connect(signer: Signer): ClaimManager__factory {
    return super.connect(signer) as ClaimManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimManagerInterface {
    return new utils.Interface(_abi) as ClaimManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimManager {
    return new Contract(address, _abi, signerOrProvider) as ClaimManager;
  }
}

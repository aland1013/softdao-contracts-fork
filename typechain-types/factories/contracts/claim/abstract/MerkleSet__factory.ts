/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MerkleSet,
  MerkleSetInterface,
} from "../../../../contracts/claim/abstract/MerkleSet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    name: "SetMerkleRoot",
    type: "event",
  },
  {
    inputs: [],
    name: "getMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60803461007c57601f61011038819003918201601f19168301916001600160401b038311848410176100815780849260209460405283398101031261007c5760207f914960aef5e033ce5cae8a7992d4b7a6f0f9741227b66acb67c605b7019f8a46915180600055604051908152a1604051607890816100988239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015601257600080fd5b600090813560e01c634959065714602857600080fd5b34603e5781600319360112603e57602091548152f35b5080fdfea264697066735822122099f621c15fc015b3c5d29c5a9d7a1e9c48214cc66aedd4027083e2f9cadb357d64736f6c63430008100033";

type MerkleSetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleSetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleSet__factory extends ContractFactory {
  constructor(...args: MerkleSetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleSet> {
    return super.deploy(_merkleRoot, overrides || {}) as Promise<MerkleSet>;
  }
  override getDeployTransaction(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_merkleRoot, overrides || {});
  }
  override attach(address: string): MerkleSet {
    return super.attach(address) as MerkleSet;
  }
  override connect(signer: Signer): MerkleSet__factory {
    return super.connect(signer) as MerkleSet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleSetInterface {
    return new utils.Interface(_abi) as MerkleSetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleSet {
    return new Contract(address, _abi, signerOrProvider) as MerkleSet;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Satellite,
  SatelliteInterface,
} from "../../../contracts/claim/Satellite";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IConnext",
        name: "_connext",
        type: "address",
      },
      {
        internalType: "contract ICrosschain",
        name: "_distributor",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_distributorDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
    ],
    name: "ClaimInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    name: "SetMerkleRoot",
    type: "event",
  },
  {
    inputs: [],
    name: "connext",
    outputs: [
      {
        internalType: "contract IConnext",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "distributor",
    outputs: [
      {
        internalType: "contract ICrosschain",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "distributorDomain",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "domain",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "initiateClaim",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x610100604090808252346101925760808161078d80380380916100228285610197565b8339810103126101925780516001600160a01b0380821691908282036101925760209384810151918216820361019257858101519363ffffffff9384861695868103610192576004947f914960aef5e033ce5cae8a7992d4b7a6f0f9741227b66acb67c605b7019f8a4689606081970151806000558c51908152a160805260a05260e052865163617d935360e11b815292839182905afa90811561018757600091610157575b5016908160c052146101275750516105bc90816101d182396080518181816101020152610360015260a051818181610330015261052a015260c05181818160c80152818161019c01526102a0015260e051818181607701526103de0152f35b606491519062461bcd60e51b82526004820152600b60248201526a39b0b6b2903237b6b0b4b760a91b6044820152fd5b908482813d8311610180575b61016d8183610197565b8101031261017d575051386100c8565b80fd5b503d610163565b85513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176101ba57604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163479b4b521461050f5750806349590657146104f15780634d80542514610131578063bfe10928146100ec578063c2fb26a6146100ab5763de4b05481461006157600080fd5b346100a65760003660031901126100a6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346100a65760003660031901126100a657602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100a65760003660031901126100a6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60403660031901126100a6576024803567ffffffffffffffff8082116100a657366023830112156100a657808260040135116100a65782826004013560051b830101903682116100a6576040519060208201903360601b8252600435603484015263ffffffff60e01b7f000000000000000000000000000000000000000000000000000000000000000060e01b16605484015260388352826060810110906060840111176104dc576060820160405281519020926101fc6020826004013560051b016060840161054e565b600481013560608301528481019283608084015b8282106104cc5750505060005493926000935b60608401518510156102895760808560051b85010151908181106000146102785760005260205260406000205b9360001981146102635760010193610223565b86634e487b7160e01b60005260116004526000fd5b906000526020526040600020610250565b9085879203610498576040513360601b60208201527f000000000000000000000000000000000000000000000000000000000000000060e01b6001600160e01b03191660348201526004803560388301529093906001600160fb1b0390820135116100a657838161031a936058936004013560051b90848401376004013560051b810103603881018552018361054e565b60405180926345560b5d60e11b825263ffffffff7f000000000000000000000000000000000000000000000000000000000000000016600483015260018060a01b0392837f00000000000000000000000000000000000000000000000000000000000000001690830152600060448301526000606483015260006084830152600060a483015260e060c48301528051908160e484015260005b82811061047f575050918160209381610104916000838284010152601f8019910116810103019134907f0000000000000000000000000000000000000000000000000000000000000000165af190811561047357600091610441575b506040519060043582527f564785450270d021954b70d15684b259d3ec23709db8de73e3cc011bf6a56c7b60203393a3005b90506020813d60201161046b575b8161045c6020938361054e565b810103126100a657518161040f565b3d915061044f565b6040513d6000823e3d90fd5b60208282018101516101048884010152869450016103b3565b60405162461bcd60e51b815260206004820152600d818401526c34b73b30b634b210383937b7b360991b6044820152606490fd5b8135815260209182019101610210565b84634e487b7160e01b60005260416004526000fd5b346100a65760003660031901126100a6576020600054604051908152f35b346100a65760003660031901126100a65760209063ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90601f8019910116810190811067ffffffffffffffff82111761057057604052565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203d869edf04f3013d5308ac2e0cc54332fabc0ef9ff23fe683f3cdb13fa3e9bd964736f6c63430008100033";

type SatelliteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SatelliteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Satellite__factory extends ContractFactory {
  constructor(...args: SatelliteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _connext: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    _distributorDomain: PromiseOrValue<BigNumberish>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Satellite> {
    return super.deploy(
      _connext,
      _distributor,
      _distributorDomain,
      _merkleRoot,
      overrides || {}
    ) as Promise<Satellite>;
  }
  override getDeployTransaction(
    _connext: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    _distributorDomain: PromiseOrValue<BigNumberish>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _connext,
      _distributor,
      _distributorDomain,
      _merkleRoot,
      overrides || {}
    );
  }
  override attach(address: string): Satellite {
    return super.attach(address) as Satellite;
  }
  override connect(signer: Signer): Satellite__factory {
    return super.connect(signer) as Satellite__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SatelliteInterface {
    return new utils.Interface(_abi) as SatelliteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Satellite {
    return new Contract(address, _abi, signerOrProvider) as Satellite;
  }
}

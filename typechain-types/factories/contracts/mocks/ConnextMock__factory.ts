/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConnextMock,
  ConnextMockInterface,
} from "../../../contracts/mocks/ConnextMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "domain_",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "destination",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "XCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transferId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_originSender",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "_distributor",
        type: "address",
      },
    ],
    name: "callXreceive",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "domain",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "domain_",
        type: "uint32",
      },
    ],
    name: "setDomain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_destination",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_delegate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_slippage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes",
      },
    ],
    name: "xcall",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461006a57601f6105fb38819003918201601f19168301916001600160401b0383118484101761006f5780849260209460405283398101031261006a575163ffffffff811680910361006a5763ffffffff19600054161760005560405161057590816100868239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081638aac16ba14610335575080639c59e8c9146100a8578063bf8d2234146100745763c2fb26a61461004b57600080fd5b3461006f57600036600319011261006f57602063ffffffff60005416604051908152f35b600080fd5b3461006f57602036600319011261006f5763ffffffff610092610420565b1663ffffffff1960005416176000556000604051f35b3461006f5760e036600319011261006f5760248035906100c6610433565b916100cf610449565b6084359363ffffffff80861680960361006f5760a4359367ffffffffffffffff851161006f573660238601121561006f5784600401359467ffffffffffffffff8611610320578560051b976040519160209761012d898c018561045f565b835287830189819b8301019136831161006f578a8a9101915b83831061031057505060c435959150506001600160a01b038516850361006f5760005416906040519260a084019160018060a01b0389168a86015260408501528460608501526080808501525180915260c08301999060005b8181106102fc57505050966102198260009798996101ca8995859d601f19828203018252038361045f565b604051998a988997889663fd614f4160e01b8852600435600489015287015260018060a01b0316604486015260018060a01b03166064850152608484015260c060a484015260c48301906104ba565b03926001600160a01b03165af19283156102f05760009361024f575b505061024b6040519282849384528301906104ba565b0390f35b909192503d806000843e610263818461045f565b820191838184031261006f5780519067ffffffffffffffff821161006f57019082601f8301121561006f5781519067ffffffffffffffff82116102dc5750604051926102b8601f8301601f191686018561045f565b81845284828401011161006f576102d491848085019101610497565b908280610235565b634e487b7160e01b60009081526041600452fd5b6040513d6000823e3d90fd5b82518c529a89019a9189019160010161019f565b82358152918101918a9101610146565b86634e487b7160e01b60005260416004526000fd5b60e036600319011261006f57610349610420565b6024356001600160a01b038116810361006f57610364610433565b9061036d610449565b906084359460a43560c43567ffffffffffffffff9182821161006f573660238301121561006f57816004013592831161006f576024820191602484369201011161006f5788867f0e47ab85bb0215a45fffc76f9e7196681536ad25cd880b3fc6af9050ca9d0f2e86806103f48860209f8f8f916104159f8f936104079f948d948f966104df565b0390a16040519889978c89019b8c6104df565b03601f19810183528261045f565b519020604051908152f35b6004359063ffffffff8216820361006f57565b604435906001600160a01b038216820361006f57565b606435906001600160a01b038216820361006f57565b90601f8019910116810190811067ffffffffffffffff82111761048157604052565b634e487b7160e01b600052604160045260246000fd5b60005b8381106104aa5750506000910152565b818101518382015260200161049a565b906020916104d381518092818552858086019101610497565b601f01601f1916010190565b9697959493919063ffffffff16875260018060a01b0392838092166020890152166040870152166060850152608084015260a083015260e060c08301528060e08301528061010093848401376000828201840152601f01601f191601019056fea264697066735822122089d42888b4325c14b87c6bc8d586d10aa787cc93be9324ae4c466f5039bd2e1164736f6c63430008100033";

type ConnextMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnextMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnextMock__factory extends ContractFactory {
  constructor(...args: ConnextMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    domain_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnextMock> {
    return super.deploy(domain_, overrides || {}) as Promise<ConnextMock>;
  }
  override getDeployTransaction(
    domain_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(domain_, overrides || {});
  }
  override attach(address: string): ConnextMock {
    return super.attach(address) as ConnextMock;
  }
  override connect(signer: Signer): ConnextMock__factory {
    return super.connect(signer) as ConnextMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnextMockInterface {
    return new utils.Interface(_abi) as ConnextMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnextMock {
    return new Contract(address, _abi, signerOrProvider) as ConnextMock;
  }
}

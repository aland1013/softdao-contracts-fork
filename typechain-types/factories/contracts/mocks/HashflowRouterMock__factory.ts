/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  HashflowRouterMock,
  HashflowRouterMockInterface,
} from "../../../contracts/mocks/HashflowRouterMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "depositEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "estimateCrossChainFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "externalAccount",
            type: "address",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "effectiveTrader",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "effectiveBaseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxQuoteTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "txid",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IHashflowQuote.RFQTQuote",
        name: "quote",
        type: "tuple",
      },
    ],
    name: "tradeSingleHop",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "srcChainId",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "dstChainId",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "srcPool",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "dstPool",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "srcExternalAccount",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "dstExternalAccount",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "baseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "txid",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IHashflowQuote.XChainRFQTQuote",
        name: "quote",
        type: "tuple",
      },
      {
        internalType: "enum IHashflowQuote.XChainMessageProtocol",
        name: "",
        type: "uint8",
      },
    ],
    name: "tradeXChain",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100165761069a908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163439370b11461038d578163b694da621461036d57508063ea12c79f146102435763f02109291461004f57600080fd5b6003199060203683011261023b5780359167ffffffffffffffff831161023f576101a090833603011261023b576001600160a01b039160248101836100938261039c565b1661022d57506100a481830161039c565b6084820184806100b38361039c565b16156101ce576100c56100d49261039c565b168260c4850135913390610416565b61010482013560c483013581600019048111821515166101bb5760e48401359182156101a85702049260a4830190878661010d8461039c565b161561013857505060446101359561012761012f9361039c565b16930161039c565b91610416565b51f35b94915094508392839250604461014e910161039c565b908651915af161015c6103b5565b5015610166575051f35b6020606492519162461bcd60e51b8352820152601e60248201527f6e61746976652071756f7465546f6b656e207472616465206661696c656400006044820152fd5b634e487b7160e01b895260128652602489fd5b634e487b7160e01b885260118552602488fd5b5050858080875160c4860135855af16101e56103b5565b506100d457845162461bcd60e51b8152602081850152601d60248201527f6e61746976652062617365546f6b656e207472616465206661696c65640000006044820152606490fd5b6102369061039c565b6100a4565b8380fd5b8480fd5b50600319828136011261023b5781359067ffffffffffffffff821161023f576101e090823603011261023b576002602435101561023b5760e48101916001600160a01b0390816102928561039c565b16156102ce57506102b2610135936102ad6104d23414610618565b61039c565b16906101246102c36044830161039c565b910135913390610416565b925050610124810135906104d282810180911161035a578592610300604485946102fa86953414610618565b0161039c565b908651915af161030e6103b5565b5015610318575051f35b6020606492519162461bcd60e51b8352820152601b60248201527f782d636861696e206e6174697665207472616465206661696c656400000000006044820152fd5b634e487b7160e01b865260118452602486fd5b849034610389578160031936011261038957806104d260209252f35b5080fd5b84908160031936011261038957f35b356001600160a01b03811681036103b05790565b600080fd5b3d156104115767ffffffffffffffff903d8281116103fb5760405192601f8201601f19908116603f01168401908111848210176103fb5760405282523d6000602084013e565b634e487b7160e01b600052604160045260246000fd5b606090565b9190604051602094858201926323b872dd60e01b845260018060a01b039485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff94828510868611176103fb57169360e08201908111848210176103fb576040528483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152833b1561055857906104ca9291600094859283809351925af16104c46103b5565b9061059d565b8051806104d8575b50505050565b81849181010312610389578201519081159182150361055557506104fe578080806104d2565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b80fd5b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b909190156105a9575090565b8151156105b95750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106105ff575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506105dc565b1561061f57565b60405162461bcd60e51b815260206004820152601b60248201527f696e636f72726563742078436861696e466565457374696d61746500000000006044820152606490fdfea26469706673582212206cd753de9a85933b082e89433b60455e020283fcc4cb6da77716441cba4aa68164736f6c63430008100033";

type HashflowRouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HashflowRouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HashflowRouterMock__factory extends ContractFactory {
  constructor(...args: HashflowRouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HashflowRouterMock> {
    return super.deploy(overrides || {}) as Promise<HashflowRouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HashflowRouterMock {
    return super.attach(address) as HashflowRouterMock;
  }
  override connect(signer: Signer): HashflowRouterMock__factory {
    return super.connect(signer) as HashflowRouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HashflowRouterMockInterface {
    return new utils.Interface(_abi) as HashflowRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HashflowRouterMock {
    return new Contract(address, _abi, signerOrProvider) as HashflowRouterMock;
  }
}

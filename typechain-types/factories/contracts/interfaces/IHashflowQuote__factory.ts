/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IHashflowQuote,
  IHashflowQuoteInterface,
} from "../../../contracts/interfaces/IHashflowQuote";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "externalAccount",
            type: "address",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "effectiveTrader",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "effectiveBaseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxQuoteTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "txid",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IHashflowQuote.RFQTQuote",
        name: "quote",
        type: "tuple",
      },
    ],
    name: "tradeSingleHop",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "srcChainId",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "dstChainId",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "srcPool",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "dstPool",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "srcExternalAccount",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "dstExternalAccount",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "baseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "txid",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IHashflowQuote.XChainRFQTQuote",
        name: "quote",
        type: "tuple",
      },
      {
        internalType: "enum IHashflowQuote.XChainMessageProtocol",
        name: "protocol",
        type: "uint8",
      },
    ],
    name: "tradeXChain",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class IHashflowQuote__factory {
  static readonly abi = _abi;
  static createInterface(): IHashflowQuoteInterface {
    return new utils.Interface(_abi) as IHashflowQuoteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IHashflowQuote {
    return new Contract(address, _abi, signerOrProvider) as IHashflowQuote;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BatchSendEth,
  BatchSendEthInterface,
} from "../../../contracts/utilities/BatchSendEth";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001657610175908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c63efd5a1701461002c57600080fd5b8160031936011261013b57803567ffffffffffffffff8082116101375736602383011215610137578183013581811161013357602492600591368582851b8401011161012f5784359281805b61008157898951f35b600019018281101561011d578981831b85018801356001600160a01b038116810361011957818091888d51915af150803d1561011457503d86811161010257895190601f19603f81601f84011601168201828110898211176100f0578b52815281903d908c906020013e610078565b634e487b7160e01b8d5260418b52898dfd5b634e487b7160e01b8b5260418952878bfd5b610078565b5080fd5b634e487b7160e01b8a5260328852868afd5b8780fd5b8580fd5b8480fd5b8280fdfea264697066735822122031485e71dde7211aaeed4b1d5325f2ab2f06594524cd2e0ee1161292b1fc00eb64736f6c63430008100033";

type BatchSendEthConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchSendEthConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchSendEth__factory extends ContractFactory {
  constructor(...args: BatchSendEthConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BatchSendEth> {
    return super.deploy(overrides || {}) as Promise<BatchSendEth>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BatchSendEth {
    return super.attach(address) as BatchSendEth;
  }
  override connect(signer: Signer): BatchSendEth__factory {
    return super.connect(signer) as BatchSendEth__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchSendEthInterface {
    return new utils.Interface(_abi) as BatchSendEthInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchSendEth {
    return new Contract(address, _abi, signerOrProvider) as BatchSendEth;
  }
}
